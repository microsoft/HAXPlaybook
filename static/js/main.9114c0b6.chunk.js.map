{"version":3,"sources":["components/Intro.tsx","models/Types.ts","components/TaskComponent.tsx","components/TaskCardComponent.tsx","util/Utils.ts","components/CollapsibleSection.tsx","App.tsx","components/TaskList.tsx","components/CategoryTags.tsx","components/GithubExportForm.tsx","reportWebVitals.ts","components/RadioDefinition.tsx","components/Help.tsx","components/HelpButton.tsx","components/CustomRadioGroup.tsx","index.tsx"],"names":["Intro","introduction","onStartClick","className","dangerouslySetInnerHTML","__html","onClick","TaskCard","title","message","question","tasks","id","this","uuidv4","questionName","choiceValue","choice","metadata","contentData","questions","find","q","name","toString","console","log","choices","c","getChoiceFromContent","taskCard","map","task","Task","details","visibleIf","taskCards","surveyModel","values","getAllValues","properties","getFilteredProperties","filteredCards","forEach","tc","filtered","filter","ConditionRunner","run","push","TaskComponent","useState","isExpanded","setExpanded","style","fontSize","TaskCardComponent","card","hasMessage","length","getCategorySectionId","category","CollapsibleSection","taskMap","filterTasks","get","numTasks","reduce","prev","n","Fragment","TaskList","categories","Array","from","keys","marginBottom","CategoryTags","GithubExportForm","showForm","hideForm","authToken","setAuthToken","repoOwner","setRepoOwner","repoName","setRepoName","progress","setProgress","failureLog","setFailureLog","handleGithubExport","octokit","Octokit","plugin","throttling","auth","throttle","onRateLimit","retryAfter","options","warn","method","url","request","retryCount","info","onAbuseLimit","updateProgress","numFinished","Math","ceil","progressIncrementer","issues","create","owner","repo","body","then","catch","reason","finally","Modal","show","onHide","Header","closeButton","Title","Body","href","onSubmit","type","value","onChange","event","target","ProgressBar","variant","now","failure","color","Footer","App","surveyData","showIntro","setShowIntro","undoStack","setUndoStack","showGithubForm","setShowGithubForm","useEffect","titleBar","document","getElementById","grid","footer","height","offsetHeight","svRows","getElementsByClassName","scrollIntoView","URLSearchParams","window","location","search","data","getAllQuestions","Map","fromQuestionChoice","cq","categoryTasks","t","set","createTaskMap","instructionHeader","surveyInstructions","instructionsMsg","scenarioHeader","taskInstructions","scenarioMsg","flat","marginLeft","csv","replaceAll","blob","Blob","saveAs","print","clearValue","pop","oldState","disabled","json","onValueChanged","sender","valueMap","isVisible","marginRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RadioDefinition","definition","display","examples","onClose","visibleExamples","ex","filterExamples","example","i","width","marginTop","HelpButton","showHelp","setShowHelp","cursor","Help","CustomRadiogroup","cssClasses","items","contentQuestion","elements","visibleChoices","contentChoice","text","merged","index","floor","SurveyQuestionRadiogroup","ReactQuestionFactory","Instance","registerQuestion","props","React","createElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9114c0b6.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the introduction page for the survey, including\r\n// a message and a button to start the survey.\r\n\r\nimport React from 'react';\r\n\r\ninterface IntroProps {\r\n  introduction: string,\r\n  onStartClick(): void\r\n}\r\n\r\nconst Intro: React.FunctionComponent<IntroProps> = ({ introduction, onStartClick }) => {\r\n  return (\r\n    <div className=\"my-5\">\r\n      <div dangerouslySetInnerHTML={{ __html: introduction }} />\r\n      <button className=\"btn btn-primary\" onClick={onStartClick}>Start</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Intro;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This file defines the types used in the application.\r\n\r\nimport contentData from '../data/content.json';\r\nimport { ConditionRunner } from 'survey-react'\r\nimport { surveyModel } from '../App'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction getChoiceFromContent(questionName: string, choiceValue: string) {\r\n    if  (questionName == null || choiceValue == null) {\r\n      return null;\r\n    }\r\n    const metadata: any = contentData.questions.find((q: any) => q.name === questionName);\r\n    // The surveyjs framework sends a boolean value instead of string\r\n    // for boolean questions, so we need to force it to be a string\r\n    choiceValue = choiceValue.toString();\r\n    \r\n    if (metadata == null) {\r\n      console.log(\"Could not find question %s in content.json\", questionName);\r\n      return null;\r\n    }\r\n\r\n    if (metadata.choices == null) {\r\n      console.log(\"Missing choices array for question %s\", questionName);\r\n      return null;\r\n    }\r\n\r\n    return metadata.choices.find((c: any) => c.name === choiceValue);\r\n}\r\n\r\nexport class TaskCard {\r\n  title: string;\r\n  message: string;\r\n  question: string;\r\n  id: string;\r\n  tasks: Task[];\r\n\r\n  constructor(title: string, message: string, question: string, tasks: Task[]) {\r\n    this.title = title;\r\n    this.message = message;\r\n    this.tasks = tasks;\r\n    this.question = question;\r\n    this.id = uuidv4();\r\n  }\r\n\r\n  static fromQuestionChoice(questionName: string, choiceValue: string) {\r\n    const choice = getChoiceFromContent(questionName, choiceValue);\r\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\r\n      console.log(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\r\n      return null;\r\n    }\r\n\r\n    const tasks = choice.taskCard.tasks.map((task: any) => { return new Task(task.name, task.details, task.visibleIf) });\r\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\r\n  }\r\n\r\n  static filterTasks(taskCards: TaskCard[]) {\r\n    if (surveyModel) {\r\n      const values = surveyModel.getAllValues();\r\n      const properties = surveyModel.getFilteredProperties();\r\n      const filteredCards: TaskCard[] = [];\r\n      taskCards.forEach(tc => {\r\n        const filtered = tc.tasks.filter(task => new ConditionRunner(task.visibleIf ?? \"true\").run(values, properties))\r\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\r\n      })\r\n      return filteredCards;\r\n    } else {\r\n      return taskCards;\r\n    }\r\n  }\r\n}\r\n\r\nexport class Task {\r\n  name: string;\r\n  details: string;\r\n  visibleIf: string;\r\n  id: string;\r\n\r\n  constructor(name: string, details: string, visibleIf: string) {\r\n    this.name = name;\r\n    this.details = details;\r\n    this.visibleIf = visibleIf;\r\n    this.id = uuidv4();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react'\r\nimport { Task } from '../models/Types'\r\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\r\n\r\ninterface TaskProps {\r\n  task: Task;\r\n}\r\n\r\nconst TaskComponent: React.FunctionComponent<TaskProps> = ({ task }) => {\r\n  const [isExpanded, setExpanded] = useState(true);\r\n  return (\r\n    <div key={task.id} className=\"task-card\" onClick={() => setExpanded(!isExpanded)}>\r\n      <span style={{fontSize: \"0.88rem\"}}>{isExpanded ? <BsFillCaretDownFill /> : <BsFillCaretRightFill />}</span>\r\n      <span className=\"bold-text ml-1\">{task.name}</span>\r\n      {isExpanded ? <div dangerouslySetInnerHTML={{ __html: task.details }} /> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskComponent;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the card for a group of tasks\r\n// The rendered structure looks like this:\r\n//\r\n// <message>\r\n// <task_1>\r\n// ...\r\n// <task_n>\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\nimport TaskComponent from './TaskComponent';\r\n\r\ninterface TaskCardProps {\r\n  card: TaskCard;\r\n}\r\n\r\nconst TaskCardComponent: React.FunctionComponent<TaskCardProps> = ({ card }) => {\r\n  const hasMessage = card.message != null && card.message.length > 0;\r\n  return (\r\n    <div className=\"normal-text\">\r\n      { hasMessage ? <div className=\"my-3\" dangerouslySetInnerHTML={{ __html: card.message }} /> : null}\r\n      { card.tasks.length !== 0 ? \r\n        <>\r\n          {card.tasks.map(task => (\r\n            <TaskComponent task={task}/>\r\n          ))}\r\n        </> : null }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskCardComponent;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// Put general helper functions here\r\n\r\nexport function getCategorySectionId(category: string) {\r\n  return `${category}_section`\r\n}","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react';\r\nimport { TaskCard } from '../models/Types';\r\nimport TaskCardComponent from './TaskCardComponent';\r\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\r\nimport { getCategorySectionId } from '../util/Utils'\r\n\r\ninterface CollapsibleSectionProps {\r\n  taskMap: Map<string, TaskCard[]>;\r\n  category: string;\r\n}\r\n\r\nconst CollapsibleSection: React.FunctionComponent<CollapsibleSectionProps> = ({ taskMap, category }) => {\r\n  const [isExpanded, setExpanded] = useState(true);\r\n  const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n  const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\r\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\r\n  // If there are no tasks and there's no message for the category, then render nothing\r\n  return (numTasks > 0 || hasMessage) ? (\r\n    <React.Fragment>\r\n      <div id={getCategorySectionId(category)} className=\"scenario-bar my-3\" onClick={() => setExpanded(!isExpanded)}>\r\n        {isExpanded ? <BsFillCaretDownFill /> : <BsFillCaretRightFill />}\r\n        <span className=\"scenario-bar-text\">{category}</span>\r\n      </div>\r\n      {isExpanded ? tasks.map(tc => <TaskCardComponent key={tc.id} card={tc} />) : null}\r\n    </React.Fragment>\r\n  ) : null;\r\n}\r\n\r\nexport default CollapsibleSection;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// The App component is the top-level component of the application.\r\n// This component manages the state of the survey and determines\r\n// which page to show based on the status of the survey.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ReactSurveyModel, Survey } from 'survey-react';\r\nimport Intro from './components/Intro';\r\nimport TaskList from './components/TaskList';\r\nimport CategoryTags from './components/CategoryTags';\r\nimport { TaskCard } from './models/Types';\r\nimport { SurveyValueChangedOptions } from './models/SurveyCallbackTypes';\r\nimport GithubExportForm from './components/GithubExportForm';\r\nimport { BsArrowCounterclockwise } from 'react-icons/bs';\r\nimport { saveAs } from 'file-saver';\r\nimport { getCategorySectionId } from './util/Utils';\r\n\r\ninterface AppProps {\r\n  surveyData: any,\r\n  contentData: any\r\n}\r\n\r\n// Captures the survey model object upon the first time handleValueChanged is called\r\n// Exposes some encapsulated state needed for undo functionality\r\nexport let surveyModel: ReactSurveyModel;\r\n\r\nfunction createTaskMap(contentData: any) {\r\n  const questions = surveyModel?.getAllQuestions() ?? [];\r\n  const taskMap = new Map<string, TaskCard[]>();\r\n  questions.forEach(q => {\r\n    const tc = TaskCard.fromQuestionChoice(q.name, q.value);\r\n    if (tc != null) {\r\n      const category: any = contentData.questions.find((cq: any) => cq.name === q.name)?.category;\r\n      let categoryTasks = taskMap.get(category);\r\n      if (categoryTasks) {\r\n        const filtered = categoryTasks.filter((t: TaskCard) => t.question !== q.name);\r\n        filtered.push(tc);\r\n        categoryTasks = filtered;\r\n      } else {\r\n        categoryTasks = [tc];\r\n      }\r\n      taskMap.set(category, categoryTasks);\r\n    }\r\n  });\r\n  return taskMap;\r\n}\r\n\r\nconst App: React.FunctionComponent<AppProps> = ({ surveyData, contentData }) => {\r\n  const [showIntro, setShowIntro] = useState(true);\r\n  const [undoStack, setUndoStack] = useState(new Array<Map<string, string>>());\r\n  const [showGithubForm, setShowGithubForm] = useState(false);\r\n\r\n  console.log(\"STATE: showIntro=\", showIntro, \" undo=\", undoStack);\r\n\r\n  const handleValueChanged = (sender: ReactSurveyModel, options: SurveyValueChangedOptions) => {\r\n    console.log(\"ValueChanged\", sender, options);\r\n    surveyModel = sender;\r\n    const questions = sender.getAllQuestions();\r\n    const valueMap = new Map<string, string>();\r\n    questions.forEach(q => {\r\n      if (!q.isVisible) {\r\n        q.clearValue();\r\n      }\r\n      valueMap.set(q.name, q.value);\r\n    });\r\n    setUndoStack([...undoStack, valueMap]);\r\n  }\r\n\r\n  const handleUndo = () => {\r\n    if (surveyModel == null) {\r\n      console.log(\"Can't undo: surveyModel is undefined\");\r\n      return;\r\n    }\r\n\r\n    const questions = surveyModel.getAllQuestions();\r\n    questions.forEach(q => {\r\n      q.clearValue();\r\n    });\r\n\r\n    if (undoStack.length > 1) {\r\n      // The last thing pushed on the stack is the current state\r\n      // We need to pop it off first to get the old state\r\n      undoStack.pop();\r\n      const oldState = undoStack[undoStack.length - 1];\r\n      questions.forEach(q => {\r\n        q.value = oldState?.get(q.name);\r\n      });\r\n      setUndoStack([...undoStack]);\r\n    } else {\r\n      setUndoStack([]);\r\n    }\r\n  }\r\n\r\n  const handleClear = () => {\r\n    if (surveyModel == null) {\r\n      console.log(\"Can't clear: surveyModel is undefined\");\r\n      return;\r\n    }\r\n\r\n    const questions = surveyModel.getAllQuestions();\r\n    questions.forEach(q => {\r\n      q.clearValue();\r\n    });\r\n  }\r\n\r\n  const handleCategoryClick = (category: string) => {\r\n    document.getElementById(getCategorySectionId(category))?.scrollIntoView(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (showIntro) return;\r\n\r\n    const titleBar = document.getElementById(\"title-bar\");\r\n    const grid = document.getElementById(\"grid-container\");\r\n    const footer = document.getElementById(\"footer\");\r\n    if (grid) {\r\n      grid.style.height = `calc(100vh - ${footer?.offsetHeight}px - ${titleBar?.offsetHeight}px)`;\r\n    }\r\n\r\n    const svRows = document.getElementsByClassName(\"sv_row\");\r\n    if (svRows.length > 0) {\r\n      svRows[svRows.length - 1].scrollIntoView(true);\r\n    }\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const autoScrollScenarios = urlParams.get('autoScrollScenarios');\r\n    if (autoScrollScenarios === \"true\") {\r\n      const taskCards = document.getElementsByClassName(\"task-card\");\r\n      if (taskCards.length > 0) {\r\n        taskCards[taskCards.length - 1].scrollIntoView(true);\r\n      }\r\n    }\r\n  });\r\n\r\n  if (showIntro) {\r\n    // Only show intro page if introduction message is defined\r\n    const data: any = contentData;\r\n    if (data.introduction == null || data.introduction.length === 0) {\r\n      setShowIntro(false);\r\n    } else {\r\n      return (\r\n        <div className=\"row justify-content-center\">\r\n          <Intro introduction={data.introduction} onStartClick={() => setShowIntro(false)} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const taskMap = createTaskMap(contentData);\r\n  const instructionHeader = contentData.surveyInstructions?.title;\r\n  const instructionsMsg = contentData.surveyInstructions?.message;\r\n  const scenarioHeader = contentData.taskInstructions?.title;\r\n  const scenarioMsg = contentData.taskInstructions?.message;\r\n  const categories = Array.from(taskMap.keys());\r\n  const numTasks = categories.length === 0 ? 0 :\r\n    categories.map(category => TaskCard.filterTasks(taskMap.get(category) ?? []))\r\n      .flat()\r\n      .map(card => card.tasks)\r\n      .map(tasks => tasks.length)\r\n      .reduce((prev, n) => prev + n);\r\n\r\n  const handleAdoExport = () => {\r\n    let csv = \"Work Item Type,Title,Description\\n\";\r\n    for (const category of categories) {\r\n      const taskCards = taskMap.get(category) ?? [];\r\n      for (const card of taskCards) {\r\n        for (const task of card.tasks) {\r\n          // In CSV, quotation marks are escaped with 2 quotation marks\r\n          // e.g. \"Hello World\" => \"\"Hello World\"\"\r\n          const name = task.name.replaceAll(/\"/g, \"\\\"\\\"\");\r\n          const details = task.details.replaceAll(/\"/g, \"\\\"\\\"\");\r\n          csv += `\"Issue\",\"${category}: ${name}\",\"${details}\"\\n`;\r\n        }\r\n      }\r\n    }\r\n    const blob = new Blob([csv], { type: \"text/csv\" });\r\n    saveAs(blob, \"azureDevOps.csv\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id=\"title-bar\" className=\"title-bar py-2\">\r\n        <span className=\"title-bar-text ml-3\">HAX Playbook</span>\r\n        <div style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\r\n          <button onClick={handleAdoExport} className=\"blue-button\">Export CSV</button>\r\n          <button onClick={() => setShowGithubForm(true)} className=\"blue-button ml-3\">Export to Github</button>\r\n          <button onClick={() => window.print()} className=\"blue-button mx-3\">Print report</button>\r\n        </div>\r\n      </div>\r\n      <div id=\"grid-container\" className=\"grid-container\">\r\n        <div className=\"left-column\">\r\n          <div className=\"my-3 column-header\">\r\n            <span>{instructionHeader}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-column d-flex flex-row align-items-center\">\r\n          <div className=\"my-3 column-header\" >\r\n            <span>{scenarioHeader}</span>\r\n          </div>\r\n          <span style={{ marginLeft: \"auto\" }}>Total scenarios:</span>\r\n          <div className=\"circle-text circle-text-large\">\r\n            {numTasks}\r\n          </div>\r\n        </div>\r\n        <div className=\"left-column\">\r\n          {instructionsMsg != null && instructionsMsg.length > 0 ? <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> : null}\r\n        </div>\r\n        <div className=\"right-column\">\r\n          {scenarioMsg != null && scenarioMsg.length > 0 ? <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> : null}\r\n        </div>\r\n        <div className=\"left-column bottom-shadow py-3\">\r\n          <button onClick={handleClear} className=\"blue-button\">Start over</button>\r\n          <button title=\"Undo\" onClick={handleUndo} disabled={undoStack.length === 0} className=\"blue-button ml-3\"><BsArrowCounterclockwise /> Undo</button>\r\n        </div>\r\n        <div className=\"right-column bottom-shadow\">\r\n          <CategoryTags taskMap={taskMap} onClick={handleCategoryClick} />\r\n        </div>\r\n        <div className=\"left-column pt-3 scroll-pane\">\r\n          <Survey json={surveyData} onValueChanged={handleValueChanged} />\r\n        </div>\r\n        <div className=\"right-column scroll-pane\">\r\n          <TaskList taskMap={taskMap} />\r\n        </div>\r\n      </div>\r\n      <GithubExportForm taskMap={taskMap} numTasks={numTasks} showForm={showGithubForm} hideForm={() => setShowGithubForm(false)} />\r\n      <div id=\"footer\" className=\"footer\">\r\n        <span className=\"mx-3\">Copyright &copy; Microsoft Corporation</span>\r\n        <a style={{ marginLeft: \"auto\", marginRight: \"1em\" }} href=\"mailto:aiguidelines@microsoft.com\">Contact us</a>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the list of all task cards from the survey results\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\nimport CollapsibleSection from './CollapsibleSection';\r\n\r\ninterface TaskListProps {\r\n  taskMap: Map<string, TaskCard[]>\r\n}\r\n\r\nconst TaskList: React.FunctionComponent<TaskListProps> = ({ taskMap }) => {\r\n  const categories = Array.from(taskMap.keys());\r\n  return (\r\n    <div style={{marginBottom: \"3rem\"}}>\r\n      {categories.map(category => (\r\n        <CollapsibleSection key={category} taskMap={taskMap} category={category}/>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskList;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the card for a task\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\n\r\ninterface CategoryTagsProps {\r\n  taskMap: Map<string, TaskCard[]>,\r\n  onClick: (category: string) => void\r\n}\r\n\r\nconst CategoryTags: React.FunctionComponent<CategoryTagsProps> = ({ taskMap, onClick }) => {\r\n  const categories = Array.from(taskMap.keys());\r\n  return (\r\n    <>\r\n      {categories.map(category => {\r\n        const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n        const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\r\n        return (<div className=\"category-tag\" onClick={() => onClick(category)}><span>{category}</span><div className=\"circle-text circle-text-small\">{numTasks}</div></div>)\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryTags;","import React, { useState } from 'react';\r\nimport { TaskCard } from '../models/Types';\r\nimport { Modal, ProgressBar } from 'react-bootstrap';\r\nimport { Octokit } from \"@octokit/rest\";\r\nimport { throttling } from \"@octokit/plugin-throttling\";\r\n\r\ninterface GithubExportProps {\r\n  taskMap: Map<string, TaskCard[]>;\r\n  numTasks: number;\r\n  showForm: boolean;\r\n  hideForm: Function;\r\n}\r\n\r\nconst GithubExportForm: React.FunctionComponent<GithubExportProps> = ({ taskMap, numTasks, showForm, hideForm }) => {\r\n  const [authToken, setAuthToken] = useState(\"\");\r\n  const [repoOwner, setRepoOwner] = useState(\"\");\r\n  const [repoName, setRepoName] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [failureLog, setFailureLog] = useState(Array<any>());\r\n  const categories = Array.from(taskMap.keys());\r\n\r\n  const handleGithubExport = () => {\r\n    const Throttlekit = Octokit.plugin(throttling);\r\n    const octokit = new Throttlekit({\r\n      auth: authToken,\r\n      throttle: {\r\n        onRateLimit: (retryAfter: any, options: any, octokit: any) => {\r\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\r\n          if (options.request.retryCount === 0) {\r\n            // only retries once\r\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\r\n            return true;\r\n          }\r\n        },\r\n        onAbuseLimit: (retryAfter: any, options: any, octokit: any) => {\r\n          // does not retry, only logs a warning\r\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\r\n        },\r\n      },\r\n    });\r\n\r\n    // Counts the number of finished promises\r\n    // The count has to be wrapped in a closure to avoid race conditions\r\n    // Fixes eslint no-loop-func warning\r\n    function progressIncrementer() {\r\n      let numFinished = 0;\r\n      function update() {\r\n        numFinished += 1;\r\n        setProgress(Math.ceil(numFinished / numTasks * 100));\r\n      }\r\n      return update;\r\n    }\r\n\r\n    let updateProgress = progressIncrementer();\r\n    for (const category of categories) {\r\n      const taskCards = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n      for (const card of taskCards) {\r\n        for (const task of card.tasks) {\r\n          let title = `${category}: ${task.name}`;\r\n          octokit.issues.create({\r\n            owner: repoOwner,\r\n            repo: repoName,\r\n            title: title,\r\n            body: task.details\r\n          }).then(() => {\r\n            console.log(\"Issue creation succeded\", title);\r\n          }).catch((reason) => {\r\n            console.log(\"Issue creation failed\", reason);\r\n            setFailureLog([...failureLog, reason]);\r\n          }).finally(() => {\r\n            updateProgress();\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal show={showForm} onHide={() => hideForm()}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Github Export</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div>\r\n          <p>This form will export your survey results to issues on your GitHub repository.</p>\r\n          <p>Go to the <a href=\"https://github.com/settings/tokens\">token section of GitHub Developer Settings</a> to generate a personal access token.</p>\r\n        </div>\r\n        <form onSubmit={handleGithubExport}>\r\n          <label>Repo owner: <input type=\"text\" value={repoOwner} onChange={(event) => setRepoOwner(event.target.value)} /></label>\r\n          <label>Repo name: <input type=\"text\" value={repoName} onChange={(event) => setRepoName(event.target.value)} /></label>\r\n          <label>Personal access token: <input type=\"text\" value={authToken} onChange={(event) => setAuthToken(event.target.value)} /></label>\r\n        </form>\r\n        {progress > 0 ? (\r\n          <>\r\n            <span>{progress}% complete</span>\r\n            <ProgressBar variant=\"info\" now={progress} />\r\n          </>\r\n        ) : null}\r\n        {failureLog.map((failure) => \r\n          (<div style={{color: \"red\"}}>[Error] {`${failure}`}</div>)\r\n        )}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <button className=\"blue-button\" onClick={() => hideForm()}>\r\n          Close\r\n        </button>\r\n        <button className=\"blue-button\" onClick={handleGithubExport}>\r\n          Export\r\n        </button>\r\n      </Modal.Footer>\r\n    </Modal>)\r\n}\r\n\r\nexport default GithubExportForm;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react'\r\nimport { BsFillQuestionCircleFill } from 'react-icons/bs'\r\nimport Help from './Help';\r\n\r\ninterface RadioDefinitionProps {\r\n  definition: string\r\n}\r\n\r\nconst RadioDefinition: React.FunctionComponent<RadioDefinitionProps> = ({definition}) => {\r\n  return (\r\n    <div className=\"radio-definition\">\r\n      <div className=\"light-text\" style={{ display: \"inline\", fontSize: \"0.85em\", marginRight: \"0.75em\" }} dangerouslySetInnerHTML={{ __html: definition }}></div>\r\n    </div>);\r\n}\r\n\r\nexport default RadioDefinition;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the help cards shown below the survey\r\n\r\nimport React from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\nimport { surveyModel } from '../App'\r\nimport { ConditionRunner } from 'survey-react'\r\n\r\ninterface HelpProps {\r\n  name: string,\r\n  examples: Array<any>\r\n  show: boolean,\r\n  onClose: () => void\r\n}\r\n\r\nfunction filterExamples(examples: Array<any>) {\r\n  if (surveyModel) {\r\n    const values = surveyModel.getAllValues();\r\n    const properties = surveyModel.getFilteredProperties();\r\n    return examples.filter(ex => new ConditionRunner(ex.visibleIf ?? \"true\").run(values, properties));\r\n  } else {\r\n    console.log(\"Could not filter examples because surveyModel is null\");\r\n    return examples;\r\n  }\r\n}\r\n\r\nconst App: React.FunctionComponent<HelpProps> = ({ name, examples, show, onClose }) => {\r\n  const visibleExamples = filterExamples(examples);\r\n  console.log(`Filtered ${visibleExamples.length} visible examples out of ${examples.length} total examples for help=${name}`);\r\n  const body = visibleExamples?.map((example, i) => {\r\n    return (\r\n      <>\r\n        <h5>{example.name}</h5>\r\n        <div dangerouslySetInnerHTML={{ __html: example.details }}></div>\r\n        {i < visibleExamples.length-1 ? (<hr style={{ width: \"100%\", marginTop: \"1.5em\", marginBottom: \"1.5em\" }}/>) : null}\r\n      </>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{name} examples</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{body}</Modal.Body>\r\n        <Modal.Footer>\r\n          <button className=\"blue-button\" onClick={onClose}>\r\n            Close\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react'\r\nimport { BsFillQuestionCircleFill } from 'react-icons/bs'\r\nimport Help from './Help';\r\n\r\ninterface HelpButtonProps {\r\n  name: string,\r\n  examples: Array<any>\r\n}\r\n\r\nconst HelpButton: React.FunctionComponent<HelpButtonProps> = ({ name, examples }) => {\r\n  const [showHelp, setShowHelp] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <BsFillQuestionCircleFill color=\"#6CCAFF\" style={{ cursor: 'pointer', marginTop: \"-3px\" }} onClick={() => setShowHelp(true)} />\r\n      <Help name={name} examples={examples} show={showHelp} onClose={() => setShowHelp(false)} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HelpButton;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { SurveyQuestionRadiogroup } from 'survey-react';\r\nimport * as React from 'react';\r\nimport contentData from '../data/content.json';\r\nimport RadioDefinition from './RadioDefinition';\r\nimport HelpButton from './HelpButton';\r\n\r\nexport class CustomRadiogroup extends SurveyQuestionRadiogroup {\r\n  protected getItems(cssClasses: any): Array<any> {\r\n    const items = super.getItems(cssClasses);\r\n\r\n    const contentQuestion: any = contentData.questions.find(q => q.name === this.question.name);\r\n\r\n    const elements = this.question.visibleChoices.map(choice => {\r\n      const contentChoice = contentQuestion.choices.find((cq: any) => cq.name === choice.value);\r\n      return (\r\n        contentChoice != null ? (\r\n          <>\r\n            <HelpButton name={choice.text} examples={contentChoice.examples} />\r\n            <RadioDefinition key={contentChoice.name + \"__customradiogroup\"}\r\n                            definition={contentChoice.definition}  />\r\n          </>\r\n        ) : null\r\n      )\r\n    });\r\n\r\n    const merged = Array(items.length * 2);\r\n    for (let i = 0; i < items.length * 2; i++) {\r\n      const index = Math.floor(i / 2);\r\n      merged[i] = (i % 2 === 0) ? items[index] : elements[index];\r\n    }\r\n\r\n    return merged;\r\n  }\r\n}\r\n\r\nexport default CustomRadiogroup;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/survey.min.css';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport surveyData from './data/survey.json';\r\nimport contentData from './data/content.json';\r\nimport { ReactQuestionFactory } from 'survey-react';\r\nimport { CustomRadiogroup } from './components/CustomRadioGroup';\r\n\r\n// ReactQuestionFactory sets the type of component that will be rendered for a given\r\n// type of question\r\nReactQuestionFactory.Instance.registerQuestion(\"radiogroup\", (props) => {\r\n  return React.createElement(CustomRadiogroup, props);\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App surveyData={surveyData} contentData={contentData} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}