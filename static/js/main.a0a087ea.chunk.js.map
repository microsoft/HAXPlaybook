{"version":3,"sources":["components/Intro.tsx","models/Types.ts","components/TaskComponent.tsx","components/TaskCardComponent.tsx","util/Utils.ts","components/CollapsibleSection.tsx","App.tsx","components/TaskList.tsx","components/CategoryTags.tsx","components/GithubExportForm.tsx","components/ExportDialog.tsx","components/LinkDialog.tsx","reportWebVitals.ts","components/RadioDefinition.tsx","components/Help.tsx","components/HelpButton.tsx","components/CustomRadioGroup.tsx","index.tsx"],"names":["Intro","introduction","onStartClick","className","dangerouslySetInnerHTML","__html","onClick","TaskCard","title","message","question","tasks","id","this","uuidv4","questionName","choiceValue","choice","metadata","contentData","questions","find","q","name","toString","console","log","choices","c","getChoiceFromContent","taskCard","debug","map","task","Task","details","visibleIf","taskCards","surveyModel","values","getAllValues","properties","getFilteredProperties","filteredCards","forEach","tc","filtered","filter","ConditionRunner","run","push","TaskComponent","isHighContrast","useState","isExpanded","setExpanded","highContrastColor","aria-label","color","TaskCardComponent","card","hasMessage","length","getCategorySectionId","category","isNullOrEmpty","str","trim","CollapsibleSection","taskMap","filterTasks","get","numTasks","reduce","prev","n","highContrastBorder","Fragment","style","border","TaskList","categories","Array","from","keys","CategoryTags","display","marginTop","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","DialogType","largeHeader","GithubExportForm","showForm","onClose","authToken","setAuthToken","repoOwner","setRepoOwner","repoName","setRepoName","progress","setProgress","failureLog","setFailureLog","Dialog","hidden","onDismiss","modalProps","href","TextField","label","onChange","_","newValue","ProgressIndicator","description","percentComplete","failure","DialogFooter","PrimaryButton","octokit","Octokit","plugin","throttling","auth","throttle","onRateLimit","retryAfter","options","warn","method","url","request","retryCount","info","onAbuseLimit","updateProgress","numFinished","progressIncrementer","issues","create","owner","repo","body","then","catch","reason","finally","handleGithubExport","text","DefaultButton","key","ExportDialog","show","onCsvExport","onGithubExport","onPdfExport","onLinkExport","selectedKey","setSelectedKey","React","ev","option","ChoiceGroup","setTimeout","error","LinkDialog","defaultValue","window","location","navigator","clipboard","writeText","isFirstRender","isDeserializing","autoscroll","isWideScreen","innerWidth","adjustVerticalAlignment","categoryDiv","document","getElementById","buttonDiv","minHeight","clientHeight","heightDiff","matches","paddingBottom","match","pb","parseInt","App","surveyData","showIntro","setShowIntro","showSurvey","setShowSurvey","undoStack","setUndoStack","showExportForm","setShowExportForm","showLinkDialog","setShowLinkDialog","showGithubForm","setShowGithubForm","setHighContrast","isMobileLayout","setMobileLayout","handleAfterRender","sender","state","URLSearchParams","search","test","getAllQuestions","valueMap","Map","numQuestions","i","pages","page","j","elements","charAt","choiceIx","value","set","firstUndoStack","deserializeState","handleValueChanged","isVisible","clearValue","URL","searchParams","serialized","found","k","serializeState","history","replaceState","countPreview","classList","add","remove","handleUndo","pop","oldState","handleClear","handleCategoryClick","categorySection","scrollIntoView","focus","useEffect","getComputedStyle","getElementsByClassName","getPropertyValue","titleBar","viewScenariosBar","surveyContainer","height","offsetHeight","scenarioContainer","footer","grid","svRows","handleResize","handleKeyPress","handleMouseClick","addEventListener","removeEventListener","data","fromQuestionChoice","cq","categoryTasks","t","createTaskMap","instructionHeader","surveyInstructions","instructionsMsg","scenarioHeader","taskInstructions","scenarioMsg","flat","handleAdoExport","csv","replaceAll","blob","Blob","saveAs","borderBottom","role","marginLeft","disabled","fontSize","paddingRight","paddingLeft","paddingTop","lineHeight","json","onAfterRenderPage","onValueChanged","print","padding","marginBottom","fontWeight","aria-labelledby","marginRight","fontStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RadioDefinition","definition","cancelIcon","iconName","theme","getTheme","contentStyles","mergeStyleSets","container","flexFlow","alignItems","header","fonts","xLargePlus","flex","borderTop","palette","themePrimary","neutralPrimary","FontWeights","semibold","overflowY","selectors","p","margin","iconButtonStyles","root","rootHovered","neutralDark","HelpDialog","examples","titleId","useId","visibleExamples","ex","filterExamples","example","width","Modal","titleAriaId","isOpen","containerClassName","IconButton","iconProps","ariaLabel","HelpButton","showHelp","setShowHelp","backgroundColor","minWidth","Help","CustomRadiogroup","cssClasses","items","contentQuestion","visibleChoices","contentChoice","merged","index","Math","floor","SurveyQuestionRadiogroup","initializeIcons","ReactQuestionFactory","Instance","registerQuestion","props","createElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a0a087ea.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the introduction page for the survey, including\r\n// a message and a button to start the survey.\r\n\r\nimport React from 'react';\r\n\r\ninterface IntroProps {\r\n  introduction: string,\r\n  onStartClick(): void\r\n}\r\n\r\nconst Intro: React.FunctionComponent<IntroProps> = ({ introduction, onStartClick }) => {\r\n  return (\r\n    <div className=\"my-5\">\r\n      <div dangerouslySetInnerHTML={{ __html: introduction }} />\r\n      <button className=\"btn btn-primary\" onClick={onStartClick}>Start</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Intro;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This file defines the types used in the application.\r\n\r\nimport contentData from '../data/content.json';\r\nimport { ConditionRunner } from 'survey-react'\r\nimport { surveyModel } from '../App'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction getChoiceFromContent(questionName: string, choiceValue: string) {\r\n    if  (questionName == null || choiceValue == null) {\r\n      return null;\r\n    }\r\n    const metadata: any = contentData.questions.find((q: any) => q.name === questionName);\r\n    // The surveyjs framework sends a boolean value instead of string\r\n    // for boolean questions, so we need to force it to be a string\r\n    choiceValue = choiceValue.toString();\r\n    \r\n    if (metadata == null) {\r\n      console.log(\"Could not find question %s in content.json\", questionName);\r\n      return null;\r\n    }\r\n\r\n    if (metadata.choices == null) {\r\n      console.log(\"Missing choices array for question %s\", questionName);\r\n      return null;\r\n    }\r\n\r\n    return metadata.choices.find((c: any) => c.name === choiceValue);\r\n}\r\n\r\nexport class TaskCard {\r\n  title: string;\r\n  message: string;\r\n  question: string;\r\n  id: string;\r\n  tasks: Task[];\r\n\r\n  constructor(title: string, message: string, question: string, tasks: Task[]) {\r\n    this.title = title;\r\n    this.message = message;\r\n    this.tasks = tasks;\r\n    this.question = question;\r\n    this.id = uuidv4();\r\n  }\r\n\r\n  static fromQuestionChoice(questionName: string, choiceValue: string) {\r\n    const choice = getChoiceFromContent(questionName, choiceValue);\r\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\r\n      console.debug(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\r\n      return null;\r\n    }\r\n\r\n    const tasks = choice.taskCard.tasks.map((task: any) => { return new Task(task.name, task.details, task.visibleIf) });\r\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\r\n  }\r\n\r\n  static filterTasks(taskCards: TaskCard[]) {\r\n    if (surveyModel) {\r\n      const values = surveyModel.getAllValues();\r\n      const properties = surveyModel.getFilteredProperties();\r\n      const filteredCards: TaskCard[] = [];\r\n      taskCards.forEach(tc => {\r\n        const filtered = tc.tasks.filter(task => new ConditionRunner(task.visibleIf ?? \"true\").run(values, properties))\r\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\r\n      })\r\n      return filteredCards;\r\n    } else {\r\n      return taskCards;\r\n    }\r\n  }\r\n}\r\n\r\nexport class Task {\r\n  name: string;\r\n  details: string;\r\n  visibleIf: string;\r\n  id: string;\r\n\r\n  constructor(name: string, details: string, visibleIf: string) {\r\n    this.name = name;\r\n    this.details = details;\r\n    this.visibleIf = visibleIf;\r\n    this.id = uuidv4();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react'\r\nimport { Task } from '../models/Types'\r\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\r\n\r\ninterface TaskProps {\r\n  task: Task,\r\n  isHighContrast: boolean\r\n}\r\n\r\nconst TaskComponent: React.FunctionComponent<TaskProps> = ({ task, isHighContrast }) => {\r\n  const [isExpanded, setExpanded] = useState(true);\r\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\r\n  return (\r\n    <div key={task.id} className=\"task-card\">\r\n      <button aria-label={`Show or hide ${task.name} task details`} className=\"task-header-button\" onClick={() => setExpanded(!isExpanded)}>\r\n        <span className=\"task-header-caret\">{isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}</span>\r\n        <h5 className=\"task-header-text\">{task.name}</h5>\r\n      </button>\r\n      {isExpanded ? <div dangerouslySetInnerHTML={{ __html: task.details }} /> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskComponent;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the card for a group of tasks\r\n// The rendered structure looks like this:\r\n//\r\n// <message>\r\n// <task_1>\r\n// ...\r\n// <task_n>\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\nimport TaskComponent from './TaskComponent';\r\n\r\ninterface TaskCardProps {\r\n  card: TaskCard,\r\n  isHighContrast: boolean\r\n}\r\n\r\nconst TaskCardComponent: React.FunctionComponent<TaskCardProps> = ({ card, isHighContrast }) => {\r\n  const hasMessage = card.message != null && card.message.length > 0;\r\n  return (\r\n    <div className=\"normal-text\">\r\n      { hasMessage ? <div className=\"my-3\" dangerouslySetInnerHTML={{ __html: card.message }} /> : null}\r\n      { card.tasks.length !== 0 ? \r\n        <>\r\n          {card.tasks.map(task => (\r\n            <TaskComponent task={task} isHighContrast={isHighContrast}/>\r\n          ))}\r\n        </> : null }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskCardComponent;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// Put general helper functions here\r\n\r\nexport function getCategorySectionId(category: string) {\r\n  return `${category}_section`\r\n}\r\n\r\nexport function isNullOrEmpty(str: string) {\r\n  return (!str || str.trim().length === 0 );\r\n}","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react';\r\nimport { TaskCard } from '../models/Types';\r\nimport TaskCardComponent from './TaskCardComponent';\r\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\r\nimport { getCategorySectionId } from '../util/Utils'\r\n\r\ninterface CollapsibleSectionProps {\r\n  taskMap: Map<string, TaskCard[]>,\r\n  category: string,\r\n  isHighContrast: boolean\r\n}\r\n\r\nconst CollapsibleSection: React.FunctionComponent<CollapsibleSectionProps> = ({ taskMap, category, isHighContrast }) => {\r\n  const [isExpanded, setExpanded] = useState(true);\r\n  const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n  const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\r\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\r\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\r\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\r\n  // If there are no tasks and there's no message for the category, then render nothing\r\n  return (numTasks > 0 || hasMessage) ? (\r\n    <React.Fragment>\r\n      <button id={getCategorySectionId(category)} className=\"scenario-bar my-3\" aria-label={`Expand or collapse ${category} section`} onClick={() => setExpanded(!isExpanded)} style={{border: highContrastBorder}}>\r\n        {isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}\r\n        <h4 className=\"scenario-bar-text\">{category}</h4>\r\n      </button>\r\n      {isExpanded ? tasks.map(tc => <TaskCardComponent key={tc.id} card={tc} isHighContrast={isHighContrast}/>) : null}\r\n    </React.Fragment>\r\n  ) : null;\r\n}\r\n\r\nexport default CollapsibleSection;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// The App component is the top-level component of the application.\r\n// This component manages the state of the survey and determines\r\n// which page to show based on the status of the survey.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ReactSurveyModel, Survey } from 'survey-react';\r\nimport Intro from './components/Intro';\r\nimport TaskList from './components/TaskList';\r\nimport CategoryTags from './components/CategoryTags';\r\nimport { TaskCard } from './models/Types';\r\nimport { SurveyValueChangedOptions } from './models/SurveyCallbackTypes';\r\nimport GithubExportForm from './components/GithubExportForm';\r\nimport ExportDialog from './components/ExportDialog';\r\nimport LinkDialog from './components/LinkDialog';\r\nimport { BsArrowCounterclockwise, BsChevronLeft, BsChevronRight } from 'react-icons/bs';\r\nimport { saveAs } from 'file-saver';\r\nimport { getCategorySectionId, isNullOrEmpty } from './util/Utils';\r\n\r\ninterface AppProps {\r\n  surveyData: any,\r\n  contentData: any\r\n}\r\n\r\n// Captures the survey model object after the page renders\r\n// Exposes some encapsulated state needed for undo functionality\r\nexport let surveyModel: ReactSurveyModel;\r\n\r\n// SurveyJS will re-render its component when pages are changed or when the\r\n// app switches from mobile to desktop view. Some things need to only happen\r\n// on the first render.\r\nlet isFirstRender = true;\r\nlet isDeserializing = false;\r\nlet autoscroll = true;\r\n\r\nfunction createTaskMap(contentData: any) {\r\n  const questions = surveyModel?.getAllQuestions() ?? [];\r\n  const taskMap = new Map<string, TaskCard[]>();\r\n  questions.forEach(q => {\r\n    const tc = TaskCard.fromQuestionChoice(q.name, q.value);\r\n    if (tc != null) {\r\n      const category: any = contentData.questions.find((cq: any) => cq.name === q.name)?.category;\r\n      let categoryTasks = taskMap.get(category);\r\n      if (categoryTasks) {\r\n        const filtered = categoryTasks.filter((t: TaskCard) => t.question !== q.name);\r\n        filtered.push(tc);\r\n        categoryTasks = filtered;\r\n      } else {\r\n        categoryTasks = [tc];\r\n      }\r\n      taskMap.set(category, categoryTasks);\r\n    }\r\n  });\r\n  return taskMap;\r\n}\r\n\r\nfunction isWideScreen() {\r\n  return window.innerWidth > 425;\r\n}\r\n\r\n// Switches the survey to multi-page or single-page format\r\n// eslint-disable-next-line\r\nfunction arrangeSurveyPages(surveyData: any, isMobileLayout: boolean) {\r\n  const surveyQuestions = [];\r\n  for (let i = 0; i < surveyData.pages?.length; i++) {\r\n    const page = surveyData.pages[i];\r\n    for (let j = 0; j < page.elements?.length; j++) {\r\n      surveyQuestions.push(page.elements[j]);\r\n    }\r\n  }\r\n  surveyData.pages = [];\r\n  if (isMobileLayout) {\r\n    // Split the survey into multiple pages\r\n    for (let q of surveyQuestions) {\r\n      surveyData.pages.push({ elements: [q] });\r\n    }\r\n  } else {\r\n    // Combine all pages into 1 page\r\n    surveyData.pages.push({ elements: surveyQuestions });\r\n  }\r\n  return surveyData;\r\n}\r\n\r\n// vertically align the button row with the category tags row\r\nfunction adjustVerticalAlignment() {\r\n  const categoryDiv = document.getElementById(\"category-container\");\r\n  const buttonDiv = document.getElementById(\"survey-buttons\");\r\n  if (categoryDiv && buttonDiv) {\r\n    if (isNullOrEmpty(categoryDiv.style.minHeight)) {\r\n      categoryDiv.style.minHeight = `${buttonDiv.clientHeight}px`;\r\n    }\r\n    const heightDiff = categoryDiv.clientHeight - buttonDiv.clientHeight;\r\n    // parse the padding - it will be in format of \"5px\"\r\n    const matches = buttonDiv.style.paddingBottom?.match(/[0-9]+/);\r\n    const pb = matches == null ? 0 : parseInt(matches[0]);\r\n\r\n    if (heightDiff !== 0) {\r\n      buttonDiv.style.paddingBottom = `${pb + heightDiff}px`;\r\n    }\r\n  }\r\n}\r\n\r\nconst App: React.FunctionComponent<AppProps> = ({ surveyData, contentData }) => {\r\n  const [showIntro, setShowIntro] = useState(true);\r\n  const [showSurvey, setShowSurvey] = useState(true);\r\n  const [undoStack, setUndoStack] = useState(new Array<Map<string, string>>());\r\n  const [showExportForm, setShowExportForm] = useState(false);\r\n  const [showLinkDialog, setShowLinkDialog] = useState(false);\r\n  const [showGithubForm, setShowGithubForm] = useState(false);\r\n  const [isHighContrast, setHighContrast] = useState(false);\r\n  const [isMobileLayout, setMobileLayout] = useState(!isWideScreen());\r\n\r\n  console.log(\"STATE: showIntro=\", showIntro, \" showSurvey=\", showSurvey,\r\n    \" isMobileLayout=\", isMobileLayout, \" isHighContrast=\", isHighContrast);\r\n\r\n  //surveyData = arrangeSurveyPages(surveyData, isMobileLayout);\r\n\r\n  const deserializeState = (state: string) => {\r\n    console.log(\"Deserializing state: \", state);\r\n    let regex = /^[0-9x]*$/g;\r\n    if (!regex.test(state)) {\r\n      console.error(\"Unsupported state string: \", state);\r\n      return;\r\n    }\r\n\r\n    const questions = surveyModel.getAllQuestions();\r\n    if (state.length !== questions.length) {\r\n      console.error(\"State string length != number of questions\");\r\n      return;\r\n    }\r\n\r\n    const valueMap = new Map<string, string>();\r\n    let numQuestions = 0;\r\n    isDeserializing = true;\r\n    for (let i = 0; i < surveyData.pages?.length; i++) {\r\n      const page = surveyData.pages[i];\r\n      for (let j = 0; j < page.elements?.length; j++) {\r\n        numQuestions++;\r\n        if (numQuestions > state.length) {\r\n          console.error(\"survey.json contains more questions than state\");\r\n          isDeserializing = false;\r\n          return;\r\n        }\r\n        if (state.charAt(j) === \"x\") {\r\n          continue;\r\n        }\r\n        const choiceIx = parseInt(state.charAt(j));\r\n        const value = page.elements[j].choices[choiceIx]?.value;\r\n        const questionName = page.elements[j].name;\r\n        if (value) {\r\n          valueMap.set(questionName, value);\r\n        } else {\r\n          console.error(`Choice not found for state index=${j}`);\r\n          isDeserializing = false;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    questions.forEach(q => {\r\n      q.value = valueMap.get(q.name);\r\n    });\r\n    if (isFirstRender) {\r\n      // Set the undo stack up if the page is loading from a saved state\r\n      let valueMap = new Map<string, string>();\r\n      let firstUndoStack: Map<string, string>[] = []\r\n      questions.forEach(q => {\r\n        if (q.value) {\r\n          valueMap = new Map<string, string>(valueMap);\r\n          valueMap.set(q.name, q.value);\r\n          firstUndoStack = [...firstUndoStack, valueMap];\r\n        }\r\n      });\r\n      setUndoStack(firstUndoStack);\r\n    }\r\n    isDeserializing = false;\r\n    console.log(\"Deserialization successful\", valueMap);\r\n  }\r\n\r\n  const serializeState = () => {\r\n    if (surveyModel == null) {\r\n      console.log(\"Can't serialize: surveyModel is undefined\");\r\n      return \"\";\r\n    }\r\n\r\n    // Values is a map of {questionName: questionValue}\r\n    const values = surveyModel.getAllValues();\r\n    let serialized = \"\";\r\n    for (let i = 0; i < surveyData.pages?.length; i++) {\r\n      let page = surveyData.pages[i];\r\n      for (let j = 0; j < page.elements?.length; j++) {\r\n        let choices = page.elements[j].choices;\r\n        let questionName = page.elements[j].name;\r\n        let found = false;\r\n        for (let k = 0; k < choices?.length && !found; k++) {\r\n          if (values[questionName] === choices[k].value) {\r\n            serialized += k;\r\n            found = true;\r\n          }\r\n        }\r\n        if (!found) {\r\n          serialized += \"x\";\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"Serialized state: \", serialized);\r\n    return serialized;\r\n  }\r\n\r\n  const handleAfterRender = (sender: ReactSurveyModel, options: any) => {\r\n    console.log(\"AfterRender\", sender, options);\r\n    surveyModel = sender;\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const state = urlParams.get('state');\r\n    if (state) {\r\n      deserializeState(state);\r\n    }\r\n    isFirstRender = false;\r\n  }\r\n\r\n  const handleValueChanged = (sender: ReactSurveyModel, options: SurveyValueChangedOptions) => {\r\n    if (isDeserializing) {\r\n      return;\r\n    }\r\n    console.log(\"ValueChanged\", sender, options);\r\n    const questions = sender.getAllQuestions();\r\n    const valueMap = new Map<string, string>();\r\n    questions.forEach(q => {\r\n      // Clear answers from invisible questions\r\n      // Questions can become invisible when the user changes a previous selection\r\n      if (!q.isVisible) {\r\n        q.clearValue();\r\n      }\r\n      valueMap.set(q.name, q.value);\r\n    });\r\n    setUndoStack([...undoStack, valueMap]);\r\n\r\n    const url = new URL(window.location.toString());\r\n    url.searchParams.set(\"state\", serializeState());\r\n    window.history.replaceState({}, '', url.toString());\r\n\r\n    const countPreview = document.getElementById(\"scenario-count-preview\");\r\n    if (countPreview) {\r\n      countPreview.classList.add(\"pulse-animation\")\r\n      setTimeout(() => {\r\n        countPreview.classList.remove(\"pulse-animation\");\r\n      }, 1500)\r\n    }\r\n  }\r\n\r\n  const handleUndo = () => {\r\n    if (surveyModel == null) {\r\n      console.log(\"Can't undo: surveyModel is undefined\");\r\n      return;\r\n    }\r\n\r\n    const questions = surveyModel.getAllQuestions();\r\n    questions.forEach(q => {\r\n      q.clearValue();\r\n    });\r\n\r\n    if (undoStack.length > 1) {\r\n      // The last thing pushed on the stack is the current state\r\n      // We need to pop it off first to get the old state\r\n      undoStack.pop();\r\n      const oldState = undoStack[undoStack.length - 1];\r\n      questions.forEach(q => {\r\n        q.value = oldState?.get(q.name);\r\n      });\r\n      setUndoStack([...undoStack]);\r\n    } else {\r\n      setUndoStack([]);\r\n    }\r\n  }\r\n\r\n  const handleClear = () => {\r\n    if (surveyModel == null) {\r\n      console.log(\"Can't clear: surveyModel is undefined\");\r\n      return;\r\n    }\r\n\r\n    const questions = surveyModel.getAllQuestions();\r\n    questions.forEach(q => {\r\n      q.clearValue();\r\n    });\r\n  }\r\n\r\n  const handleCategoryClick = (category: string) => {\r\n    const categorySection = document.getElementById(getCategorySectionId(category))\r\n    if (categorySection) {\r\n      categorySection.scrollIntoView(true);\r\n      categorySection.focus();\r\n    }\r\n  }\r\n\r\n  /* eslint-disable react-hooks/exhaustive-deps */\r\n  useEffect(() => {\r\n    if (showIntro) return;\r\n\r\n    // Detect high contrast mode by checking if the background color has been modified\r\n    if (!isHighContrast) {\r\n      const leftColumnBg = window.getComputedStyle(document.getElementsByClassName(\"title-bar\")[0], null).getPropertyValue('background-color'); \r\n      if (leftColumnBg !== \"rgb(0, 27, 46)\") {\r\n        setHighContrast(true);\r\n      }\r\n    }\r\n\r\n    // Resize the page to fill the screen vertically\r\n    const titleBar = document.getElementById(\"title-bar\");\r\n    if (isMobileLayout) {\r\n      const viewScenariosBar = document.getElementById(\"view-scenarios-bar\");\r\n      const surveyContainer = document.getElementById(\"survey-container\");\r\n      if (surveyContainer) {\r\n        if (viewScenariosBar) {\r\n          surveyContainer.style.height = `calc(100vh - ${titleBar?.offsetHeight}px - ${viewScenariosBar?.offsetHeight}px)`;\r\n        } else {\r\n          surveyContainer.style.height = `calc(100vh - ${titleBar?.offsetHeight}px)`;\r\n        }\r\n      }\r\n\r\n      const scenarioContainer = document.getElementById(\"scenario-header-container\");\r\n      if (scenarioContainer) {\r\n        scenarioContainer.style.height = \"\";\r\n      }\r\n    } else {\r\n      const footer = document.getElementById(\"footer\");\r\n      const grid = document.getElementById(\"two-column-grid\");\r\n      if (grid) {\r\n        grid.style.height = `calc(100vh - ${footer?.offsetHeight}px - ${titleBar?.offsetHeight}px)`;\r\n      }\r\n      adjustVerticalAlignment();\r\n    }\r\n\r\n    // Auto-scroll when the user selects a choice\r\n    if (autoscroll) {\r\n      const svRows = document.getElementsByClassName(\"sv_row\");\r\n      if (svRows.length > 0) {\r\n        svRows[svRows.length - 1].scrollIntoView(true);\r\n      }\r\n    }\r\n\r\n    const handleResize = () => {\r\n      if (isMobileLayout && isWideScreen()) {\r\n        console.log(\"Switching to desktop layout\");\r\n        setMobileLayout(false);\r\n      } else if (!isMobileLayout && !isWideScreen()) {\r\n        console.log(\"Switching to mobile layout\");\r\n        setMobileLayout(true);\r\n      } else if (!isMobileLayout) {\r\n        adjustVerticalAlignment();\r\n      }\r\n    }\r\n\r\n    const handleKeyPress = () => {\r\n      autoscroll = false;\r\n    }\r\n\r\n    const handleMouseClick = () => {\r\n      autoscroll = true;\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    document.addEventListener('keypress', handleKeyPress);\r\n    document.addEventListener('mousedown', handleMouseClick);\r\n    return function cleanup() {\r\n      window.removeEventListener('resize', handleResize);\r\n      document.removeEventListener('keypress', handleKeyPress);\r\n      document.removeEventListener('mousedown', handleMouseClick);\r\n    };\r\n  });\r\n\r\n  if (showIntro) {\r\n    // Only show intro page if introduction message is defined\r\n    const data: any = contentData;\r\n    if (data.introduction == null || data.introduction.length === 0) {\r\n      setShowIntro(false);\r\n    } else {\r\n      return (\r\n        <div className=\"row justify-content-center\">\r\n          <Intro introduction={data.introduction} onStartClick={() => setShowIntro(false)} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const taskMap = createTaskMap(contentData);\r\n  const instructionHeader = contentData.surveyInstructions?.title;\r\n  const instructionsMsg = contentData.surveyInstructions?.message;\r\n  const scenarioHeader = contentData.taskInstructions?.title;\r\n  const scenarioMsg = contentData.taskInstructions?.message;\r\n  const categories = Array.from(taskMap.keys());\r\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\r\n  const numTasks = categories.length === 0 ? 0 :\r\n    categories.map(category => TaskCard.filterTasks(taskMap.get(category) ?? []))\r\n      .flat()\r\n      .map(card => card.tasks)\r\n      .map(tasks => tasks.length)\r\n      .reduce((prev, n) => prev + n);\r\n\r\n  const handleAdoExport = () => {\r\n    let csv = \"Work Item Type,Title,Description\\n\";\r\n    for (const category of categories) {\r\n      const taskCards = taskMap.get(category) ?? [];\r\n      for (const card of taskCards) {\r\n        for (const task of card.tasks) {\r\n          // In CSV, quotation marks are escaped with 2 quotation marks\r\n          // e.g. \"Hello World\" => \"\"Hello World\"\"\r\n          const name = task.name.replaceAll(/\"/g, \"\\\"\\\"\");\r\n          const details = task.details.replaceAll(/\"/g, \"\\\"\\\"\");\r\n          csv += `\"Issue\",\"${category}: ${name}\",\"${details}\"\\n`;\r\n        }\r\n      }\r\n    }\r\n    const blob = new Blob([csv], { type: \"text/csv\" });\r\n    saveAs(blob, \"azureDevOps.csv\");\r\n  }\r\n\r\n  if (isMobileLayout) {\r\n    return (\r\n      <div>\r\n        { showSurvey ?\r\n          <div className=\"mobile-grid\">\r\n            <div id=\"title-bar\" className=\"title-bar\" style={{borderBottom: highContrastBorder}}>\r\n              <header role=\"banner\" className=\"title-bar-text\">HAX Playbook</header>\r\n              <div id=\"survey-buttons\" style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\r\n                <button aria-label=\"Restart\" onClick={handleClear} className=\"blue-button\">Restart</button>\r\n                <button aria-label=\"Undo\" onClick={handleUndo} disabled={undoStack.length === 0} className=\"blue-button ml-3\"><BsArrowCounterclockwise /> Undo</button>\r\n              </div>\r\n            </div>\r\n            { numTasks > 0 ? \r\n            <button onClick={() => setShowSurvey(false)} className=\"view-scenarios-bar\" id=\"view-scenarios-bar\">\r\n              <span style={{ color: \"white\" }}>View testing scenarios</span>\r\n              <div className=\"circle-text circle-text-large\" id=\"scenario-count-preview\" style={{border: highContrastBorder}}>\r\n                {numTasks}\r\n              </div>\r\n              <BsChevronRight color={isHighContrast ? \"#FFFFFF\" : \"#708491\"} style={{ marginLeft: \"auto\", fontSize: \"24px\", paddingRight: \"2%\" }} />\r\n            </button>\r\n            : <div></div> }\r\n            <div className=\"left-column scroll-pane\" id=\"survey-container\">\r\n              <div className=\"column-header\">\r\n                <span style={{ paddingLeft: \"4%\", paddingTop: \"16px\", fontSize: \"22px\", lineHeight: \"26px\", color: \"#ACDEFB\" }}>{instructionHeader}</span>\r\n              </div>\r\n              <Survey json={surveyData} onAfterRenderPage={handleAfterRender} onValueChanged={handleValueChanged} />\r\n            </div>\r\n          </div>\r\n          :\r\n          <>\r\n            <div id=\"title-bar\" className=\"title-bar\" style={{borderBottom: highContrastBorder}}>\r\n              <header role=\"banner\" className=\"title-bar-text\">HAX Playbook</header>\r\n              <div style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\r\n                <button aria-label=\"Export\" onClick={() => { setShowExportForm(true) }} className=\"blue-button\">Export</button>\r\n                <ExportDialog \r\n                  show={showExportForm}\r\n                  onClose={() => setShowExportForm(false)}\r\n                  onCsvExport={handleAdoExport}\r\n                  onGithubExport={() => setShowGithubForm(true)}\r\n                  onPdfExport={() => window.print()}\r\n                  onLinkExport={() => setShowLinkDialog(true)}/>\r\n                <LinkDialog \r\n                  show={showLinkDialog}\r\n                  onClose={() => setShowLinkDialog(false)} />\r\n                <GithubExportForm taskMap={taskMap} numTasks={numTasks} showForm={showGithubForm} onClose={() => setShowGithubForm(false)} />\r\n              </div>\r\n            </div>\r\n            <button onClick={() => setShowSurvey(true)} className=\"back-bar\" style={{border: isHighContrast ? \"solid white 1px\" : \"\", marginLeft: \"15px\", padding: \"10px 0px\"}}>\r\n              <BsChevronLeft color={isHighContrast ? \"#FFFFFF\" : \"#004578\"} style={{ fontSize: \"18px\", marginBottom: \"2px\" }} />\r\n              <div style={{display: \"inline-block\", marginLeft: \"5px\"}}>Back to survey</div>\r\n            </button>\r\n            <div className=\"right-column d-flex flex-row align-items-center\" id=\"scenario-header-container\">\r\n              <div className=\"mb-3 column-header\" >\r\n                <span style={{fontSize: \"22px\", color:\"#004578\", fontWeight: \"bold\"}}>{scenarioHeader}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"right-column pb-4\">\r\n              <span style={{ fontSize: \"14px\", border: highContrastBorder}}>Total scenarios:</span>\r\n              <div className=\"circle-text circle-text-large\" style={{border: highContrastBorder}}>\r\n                {numTasks}\r\n              </div>\r\n            </div>\r\n            <div className=\"right-column\">\r\n              {scenarioMsg != null && scenarioMsg.length > 0 ? <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> : null}\r\n            </div>\r\n            <div id=\"category-container\" className=\"right-column bottom-shadow\">\r\n              <CategoryTags taskMap={taskMap} onClick={handleCategoryClick} isHighContrast={isHighContrast}/>\r\n            </div>\r\n            <TaskList taskMap={taskMap} isHighContrast={isHighContrast}/>\r\n          </>\r\n        }\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div id=\"title-bar\" className=\"title-bar py-2\" style={{borderBottom: highContrastBorder}}>\r\n          <header role=\"banner\" className=\"title-bar-text ml-3\">HAX Playbook</header>\r\n          <div style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\r\n            <button aria-label=\"Export\" onClick={() => setShowExportForm(true)} className=\"blue-button mr-3\">Export</button>\r\n          </div>\r\n          <ExportDialog \r\n            show={showExportForm}\r\n            onClose={() => setShowExportForm(false)}\r\n            onCsvExport={handleAdoExport}\r\n            onGithubExport={() => setShowGithubForm(true)}\r\n            onPdfExport={() => window.print()}\r\n            onLinkExport={() => setShowLinkDialog(true)}/>\r\n          <LinkDialog \r\n            show={showLinkDialog}\r\n            onClose={() => setShowLinkDialog(false)} />\r\n        </div>\r\n        <div id=\"two-column-grid\" className=\"two-column-grid\">\r\n          <main role=\"main\" className=\"left-column\">\r\n            <h1 className=\"my-3 column-header side-padding\">\r\n              {instructionHeader}\r\n            </h1>\r\n            { isNullOrEmpty(instructionsMsg) ? <div/> : <div className=\"mb-3 normal-text\" aria-label=\"survey instructions\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> }\r\n            <div id=\"survey-buttons\" className=\"bottom-shadow side-padding\">\r\n              <button aria-label=\"Restart\" onClick={handleClear} className=\"blue-button\">Restart</button>\r\n              <button aria-label=\"Undo\" onClick={handleUndo} disabled={undoStack.length === 0} className=\"blue-button ml-3\"><BsArrowCounterclockwise /> Undo</button>\r\n            </div>\r\n            <div className=\"pt-3 scroll-pane\">\r\n              <Survey json={surveyData} onAfterRenderPage={handleAfterRender} onValueChanged={handleValueChanged} />\r\n            </div>\r\n          </main>\r\n          <div className=\"right-column\">\r\n            <div className=\"d-flex flex-row align-items-center\">\r\n              <h1 className=\"my-3 column-header side-padding\">\r\n                {scenarioHeader}\r\n              </h1>\r\n              <span id=\"total-scenarios-label\" style={{ marginLeft: \"auto\" }}>Total scenarios:</span>\r\n              <div className=\"circle-text circle-text-large\" aria-labelledby=\"total-scenarios-label\" style={{border: highContrastBorder}}>\r\n                {numTasks}\r\n              </div>\r\n            </div>\r\n            { isNullOrEmpty(scenarioMsg) ? <div/> : <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: scenarioMsg }} /> }\r\n            <div id=\"category-container\" className=\"bottom-shadow side-padding\">\r\n              <CategoryTags taskMap={taskMap} onClick={handleCategoryClick} isHighContrast={isHighContrast}/>\r\n            </div>\r\n            <div className=\"scroll-pane side-padding\">\r\n              <TaskList taskMap={taskMap} isHighContrast={isHighContrast}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <GithubExportForm taskMap={taskMap} numTasks={numTasks} showForm={showGithubForm} onClose={() => setShowGithubForm(false)} />\r\n        <footer role=\"contentinfo\" id=\"footer\" className=\"footer\">\r\n          <span className=\"mx-3\">Copyright &copy; Microsoft Corporation</span>\r\n          <address style={{ marginLeft: \"auto\", marginRight: \"1em\", marginBottom: \"0px\", display: \"inline-block\", fontStyle: \"normal\" }}>\r\n            <a href=\"mailto:aiguidelines@microsoft.com\">Contact us</a>\r\n          </address>\r\n        </footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the list of all task cards from the survey results\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\nimport CollapsibleSection from './CollapsibleSection';\r\n\r\ninterface TaskListProps {\r\n  taskMap: Map<string, TaskCard[]>,\r\n  isHighContrast: boolean\r\n}\r\n\r\nconst TaskList: React.FunctionComponent<TaskListProps> = ({ taskMap, isHighContrast }) => {\r\n  const categories = Array.from(taskMap.keys());\r\n  return (\r\n    <div className=\"task-list\" >\r\n      {categories.map(category => (\r\n        <CollapsibleSection key={category} taskMap={taskMap} category={category} isHighContrast={isHighContrast}/>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskList;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the card for a task\r\n\r\nimport React from 'react'\r\nimport { TaskCard } from '../models/Types';\r\n\r\ninterface CategoryTagsProps {\r\n  taskMap: Map<string, TaskCard[]>,\r\n  onClick: (category: string) => void,\r\n  isHighContrast: boolean\r\n}\r\n\r\nconst CategoryTags: React.FunctionComponent<CategoryTagsProps> = ({ taskMap, onClick, isHighContrast }) => {\r\n  const categories = Array.from(taskMap.keys());\r\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\r\n  return (\r\n    <>\r\n      {categories.map(category => {\r\n        const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n        const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\r\n        return (\r\n          <button aria-label={`Go to ${category} scenarios`} className=\"category-tag\" onClick={() => onClick(category)} style={{border: highContrastBorder}}>\r\n            <div style={{display: \"inline-block\", marginTop: \"-5px\"}}>{category}</div>\r\n            <div className=\"circle-text circle-text-small\" aria-label={`Number of ${category} scenarios`} style={{border: highContrastBorder}}>{numTasks}</div>\r\n          </button>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryTags;","import React, { useState } from 'react';\r\nimport { TaskCard } from '../models/Types';\r\nimport { Octokit } from \"@octokit/rest\";\r\nimport { throttling } from \"@octokit/plugin-throttling\";\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator';\r\n\r\n// Fluent UI props\r\nconst modelProps = {\r\n  isBlocking: false,\r\n  styles: { main: { maxWidth: 450 } },\r\n};\r\nconst dialogContentProps = {\r\n  type: DialogType.largeHeader,\r\n  title: 'Github Export',\r\n};\r\n\r\ninterface GithubExportProps {\r\n  taskMap: Map<string, TaskCard[]>;\r\n  numTasks: number;\r\n  showForm: boolean;\r\n  onClose: Function;\r\n}\r\n\r\nconst GithubExportForm: React.FunctionComponent<GithubExportProps> = ({ taskMap, numTasks, showForm, onClose }) => {\r\n  const [authToken, setAuthToken] = useState(\"\");\r\n  const [repoOwner, setRepoOwner] = useState(\"\");\r\n  const [repoName, setRepoName] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [failureLog, setFailureLog] = useState(Array<any>());\r\n  const categories = Array.from(taskMap.keys());\r\n\r\n  const handleGithubExport = () => {\r\n    const Throttlekit = Octokit.plugin(throttling);\r\n    const octokit = new Throttlekit({\r\n      auth: authToken,\r\n      throttle: {\r\n        onRateLimit: (retryAfter: any, options: any, octokit: any) => {\r\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\r\n          if (options.request.retryCount === 0) {\r\n            // only retries once\r\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\r\n            return true;\r\n          }\r\n        },\r\n        onAbuseLimit: (retryAfter: any, options: any, octokit: any) => {\r\n          // does not retry, only logs a warning\r\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\r\n        },\r\n      },\r\n    });\r\n\r\n    // Counts the number of finished promises\r\n    // The count has to be wrapped in a closure to avoid race conditions\r\n    // Fixes eslint no-loop-func warning\r\n    function progressIncrementer() {\r\n      let numFinished = 0;\r\n      function update() {\r\n        numFinished += 1;\r\n        setProgress(numFinished / numTasks);\r\n      }\r\n      return update;\r\n    }\r\n\r\n    let updateProgress = progressIncrementer();\r\n    for (const category of categories) {\r\n      const taskCards = TaskCard.filterTasks(taskMap.get(category) ?? []);\r\n      for (const card of taskCards) {\r\n        for (const task of card.tasks) {\r\n          let title = `${category}: ${task.name}`;\r\n          octokit.issues.create({\r\n            owner: repoOwner,\r\n            repo: repoName,\r\n            title: title,\r\n            body: task.details\r\n          }).then(() => {\r\n            console.log(\"Issue creation succeded\", title);\r\n          }).catch((reason) => {\r\n            console.log(\"Issue creation failed\", reason);\r\n            setFailureLog([...failureLog, reason]);\r\n          }).finally(() => {\r\n            updateProgress();\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      hidden={!showForm}\r\n      onDismiss={() => onClose()}\r\n      dialogContentProps={dialogContentProps}\r\n      modalProps={modelProps}\r\n    >\r\n      <div>\r\n        <p>This form will export your survey results to issues on your GitHub repository.</p>\r\n        <p>Go to the <a href=\"https://github.com/settings/tokens\">token section of GitHub Developer Settings</a> to generate a personal access token.</p>\r\n      </div>\r\n      <TextField label=\"Repo owner\" onChange={(_, newValue) => setRepoOwner(newValue ?? \"\")}  />\r\n      <TextField label=\"Repo name\" onChange={(_, newValue) => setRepoName(newValue ?? \"\")}  />\r\n      <TextField label=\"Personal access token\" onChange={(_, newValue) => setAuthToken(newValue ?? \"\")}  />\r\n      {progress > 0 ? (\r\n        <ProgressIndicator label=\"Creating issues\" description=\"Issues are being created in your Github repository\" percentComplete={progress} />\r\n      ) : null}\r\n      {failureLog.map((failure) =>\r\n        (<div style={{ color: \"red\" }}>[Error] {`${failure}`}</div>)\r\n      )}\r\n      <DialogFooter>\r\n        <PrimaryButton onClick={() => handleGithubExport()} text=\"Export\" />\r\n        <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\r\n      </DialogFooter>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default GithubExportForm;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\r\n\r\nconst options = [\r\n  {\r\n    key: 'CSV',\r\n    text: 'CSV',\r\n  },\r\n  {\r\n    key: 'Github',\r\n    text: 'Github',\r\n  },\r\n  {\r\n    key: 'PDF',\r\n    text: 'PDF',\r\n  },\r\n  {\r\n    key: 'link',\r\n    text: 'Shareable link'\r\n  }\r\n];\r\nconst modelProps = {\r\n  isBlocking: false,\r\n  styles: { main: { maxWidth: 450 } },\r\n};\r\nconst dialogContentProps = {\r\n  type: DialogType.largeHeader,\r\n  title: 'Export to',\r\n};\r\n\r\ninterface ExportDialogProps {\r\n  show: boolean,\r\n  onClose: Function,\r\n  onCsvExport: Function,\r\n  onGithubExport: Function,\r\n  onPdfExport: Function,\r\n  onLinkExport: Function\r\n}\r\n\r\nconst ExportDialog: React.FunctionComponent<ExportDialogProps> = ({ show, onClose, onCsvExport, onGithubExport, onPdfExport, onLinkExport }) => {\r\n  const [selectedKey, setSelectedKey] = useState(\"link\");\r\n\r\n  const onChange = React.useCallback((ev: React.SyntheticEvent<HTMLElement> | undefined, option: IChoiceGroupOption | undefined) => {\r\n    if (option) {\r\n      setSelectedKey(option.key);\r\n    }\r\n  }, []);\r\n\r\n  function doExport() {\r\n    onClose();\r\n    if (selectedKey === \"CSV\") {\r\n      onCsvExport();\r\n    } else if (selectedKey === \"Github\") {\r\n      onGithubExport();\r\n    } else if (selectedKey === \"PDF\") {\r\n      // This is timing sensitive - the page needs to re-render before we print it\r\n      // to avoid printing the export dialog window\r\n      setTimeout(onPdfExport, 250);\r\n    } else if (selectedKey === \"link\") {\r\n      onLinkExport();\r\n    } else {\r\n      console.error(\"Export - unknown selection\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        hidden={!show}\r\n        onDismiss={() => onClose()}\r\n        dialogContentProps={dialogContentProps}\r\n        modalProps={modelProps}\r\n      >\r\n        <ChoiceGroup selectedKey={selectedKey} options={options} onChange={onChange} />\r\n        <DialogFooter>\r\n          <PrimaryButton onClick={() => doExport()} text=\"Confirm\" />\r\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\r\n        </DialogFooter>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExportDialog;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport * as React from 'react';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\r\n\r\n// FluentUI props\r\nconst modelProps = {\r\n  isBlocking: false,\r\n  styles: { main: { maxWidth: 450 } },\r\n};\r\nconst dialogContentProps = {\r\n  type: DialogType.largeHeader,\r\n  title: 'Share your results',\r\n};\r\n\r\ninterface LinkDialogProps {\r\n  show: boolean,\r\n  onClose: Function\r\n}\r\n\r\nconst LinkDialog: React.FunctionComponent<LinkDialogProps> = ({ show, onClose }) => {\r\n  return (\r\n    <>\r\n      <Dialog\r\n        hidden={!show}\r\n        onDismiss={() => onClose()}\r\n        dialogContentProps={dialogContentProps}\r\n        modalProps={modelProps}\r\n      >\r\n        <div className=\"mb-3\">This link will contain the current survey answers.</div>\r\n        <TextField defaultValue={window.location.toString()} />\r\n        <DialogFooter>\r\n          <PrimaryButton onClick={() => navigator.clipboard.writeText(window.location.toString())} text=\"Copy\" />\r\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\r\n        </DialogFooter>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LinkDialog;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React from 'react'\r\n\r\ninterface RadioDefinitionProps {\r\n  definition: string\r\n}\r\n\r\nconst RadioDefinition: React.FunctionComponent<RadioDefinitionProps> = ({definition}) => {\r\n  return (\r\n    <div className=\"radio-definition\">\r\n      <span className=\"light-text\" aria-label=\"definition of survey choice\" dangerouslySetInnerHTML={{ __html: definition }}></span>\r\n    </div>);\r\n}\r\n\r\nexport default RadioDefinition;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n// This component renders the help cards shown below the survey\r\n\r\nimport * as React from 'react';\r\nimport { useId } from '@fluentui/react-hooks';\r\nimport {\r\n  getTheme,\r\n  mergeStyleSets,\r\n  FontWeights,\r\n  Modal,\r\n  IconButton,\r\n  IIconProps,\r\n} from '@fluentui/react';\r\nimport { surveyModel } from '../App'\r\nimport { ConditionRunner } from 'survey-react'\r\n\r\ninterface HelpProps {\r\n  name: string,\r\n  examples: Array<any>\r\n  show: boolean,\r\n  onClose: () => void\r\n}\r\n\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\n\r\nfunction filterExamples(examples: Array<any>) {\r\n  if (surveyModel) {\r\n    const values = surveyModel.getAllValues();\r\n    const properties = surveyModel.getFilteredProperties();\r\n    return examples.filter(ex => new ConditionRunner(ex.visibleIf ?? \"true\").run(values, properties));\r\n  } else {\r\n    console.log(\"Could not filter examples because surveyModel is null\");\r\n    return examples;\r\n  }\r\n}\r\n\r\nexport const HelpDialog: React.FunctionComponent<HelpProps> = ({ name, examples, show, onClose }) => {\r\n\r\n  // Use useId() to ensure that the IDs are unique on the page.\r\n  const titleId = useId('title');\r\n\r\n  const visibleExamples = filterExamples(examples);\r\n  console.debug(`Filtered ${visibleExamples.length} visible examples out of ${examples.length} total examples for help=${name}`);\r\n  const body = visibleExamples?.map((example, i) => {\r\n    return (\r\n      <div key={example.name}>\r\n        <h5>{example.name}</h5>\r\n        <div dangerouslySetInnerHTML={{ __html: example.details }}></div>\r\n        {i < visibleExamples.length-1 ? (<hr style={{ width: \"100%\", marginTop: \"1.5em\", marginBottom: \"1.5em\" }}/>) : null}\r\n      </div>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        titleAriaId={titleId}\r\n        isOpen={show}\r\n        onDismiss={onClose}\r\n        isBlocking={false}\r\n        containerClassName={contentStyles.container}\r\n      >\r\n        <section>\r\n          <header className={contentStyles.header}>\r\n            <h3 id={titleId}>{name} - Examples</h3>\r\n            <IconButton\r\n              styles={iconButtonStyles}\r\n              iconProps={cancelIcon}\r\n              ariaLabel=\"Close popup modal\"\r\n              onClick={onClose}\r\n            />\r\n          </header>\r\n          <div className={contentStyles.body}>\r\n            {body}\r\n          </div>\r\n        </section>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Fluent UI theme setup\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n  container: {\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    alignItems: 'stretch',\r\n  },\r\n  header: [\r\n    theme.fonts.xLargePlus,\r\n    {\r\n      flex: '1 1 auto',\r\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n      color: theme.palette.neutralPrimary,\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      fontWeight: FontWeights.semibold,\r\n      padding: '12px 12px 14px 24px',\r\n    },\r\n  ],\r\n  body: {\r\n    flex: '4 4 auto',\r\n    padding: '0 24px 24px 24px',\r\n    overflowY: 'hidden',\r\n    selectors: {\r\n      p: { margin: '14px 0' },\r\n      'p:first-child': { marginTop: 0 },\r\n      'p:last-child': { marginBottom: 0 },\r\n    },\r\n  },\r\n});\r\nconst iconButtonStyles = {\r\n  root: {\r\n    color: theme.palette.neutralPrimary,\r\n    marginLeft: 'auto',\r\n    marginTop: '4px',\r\n    marginRight: '2px',\r\n  },\r\n  rootHovered: {\r\n    color: theme.palette.neutralDark,\r\n  },\r\n};\r\n\r\nexport default HelpDialog;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React, { useState } from 'react'\r\nimport { BsFillQuestionCircleFill } from 'react-icons/bs'\r\nimport Help from './Help';\r\n\r\ninterface HelpButtonProps {\r\n  name: string,\r\n  examples: Array<any>\r\n}\r\n\r\nconst HelpButton: React.FunctionComponent<HelpButtonProps> = ({ name, examples }) => {\r\n  const [showHelp, setShowHelp] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button aria-label={`show ${name} help`} style={{ backgroundColor: \"transparent\", width: \"auto\", minWidth: \"20px\", padding: \"0px\" }} onClick={() => setShowHelp(true)} >\r\n        <BsFillQuestionCircleFill color=\"#6CCAFF\" style={{ marginTop: \"-3px\" }} />\r\n      </button>\r\n      <Help name={name} examples={examples} show={showHelp} onClose={() => setShowHelp(false)} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HelpButton;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { SurveyQuestionRadiogroup } from 'survey-react';\r\nimport * as React from 'react';\r\nimport contentData from '../data/content.json';\r\nimport RadioDefinition from './RadioDefinition';\r\nimport HelpButton from './HelpButton';\r\n\r\nexport class CustomRadiogroup extends SurveyQuestionRadiogroup {\r\n  protected getItems(cssClasses: any): Array<any> {\r\n    const items = super.getItems(cssClasses);\r\n\r\n    const contentQuestion: any = contentData.questions.find(q => q.name === this.question.name);\r\n\r\n    const elements = this.question.visibleChoices.map(choice => {\r\n      const contentChoice = contentQuestion.choices.find((cq: any) => cq.name === choice.value);\r\n      return (\r\n        contentChoice != null ? (\r\n          <>\r\n            <HelpButton name={choice.text} examples={contentChoice.examples} />\r\n            <RadioDefinition key={contentChoice.name + \"__customradiogroup\"}\r\n                            definition={contentChoice.definition}  />\r\n          </>\r\n        ) : null\r\n      )\r\n    });\r\n\r\n    const merged = Array(items.length * 2);\r\n    for (let i = 0; i < items.length * 2; i++) {\r\n      const index = Math.floor(i / 2);\r\n      merged[i] = (i % 2 === 0) ? items[index] : elements[index];\r\n    }\r\n\r\n    return merged;\r\n  }\r\n}\r\n\r\nexport default CustomRadiogroup;","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/survey.min.css';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport surveyData from './data/survey.json';\r\nimport contentData from './data/content.json';\r\nimport { ReactQuestionFactory } from 'survey-react';\r\nimport { CustomRadiogroup } from './components/CustomRadioGroup';\r\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\r\n\r\ninitializeIcons();\r\n\r\n// ReactQuestionFactory sets the type of component that will be rendered for a given\r\n// type of question\r\nReactQuestionFactory.Instance.registerQuestion(\"radiogroup\", (props) => {\r\n  return React.createElement(CustomRadiogroup, props);\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App surveyData={surveyData} contentData={contentData} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}